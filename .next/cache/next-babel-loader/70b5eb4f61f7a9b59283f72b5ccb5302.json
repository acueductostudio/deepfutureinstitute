{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Header from \"./header\";\nimport { useRouter } from \"next/router\";\nimport CookieMessage from \"./CookieMessage\";\nimport { initGA, logPageView } from \"utils/analytics\";\nimport ReactPixel from \"react-facebook-pixel\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport NewsletterPopup from \"./NewsletterPopup\";\nexport default (({\n  children,\n  toggleLang,\n  checkForConsent,\n  consentToCookies,\n  hasToConsent,\n  hasLoaded,\n  locale\n}) => {\n  const {\n    0: isOpen,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: showSketch,\n    1: setShowSketch\n  } = useState(true);\n  const {\n    0: isAbout,\n    1: setIsAbout\n  } = useState(false);\n  const {\n    0: headerTitle,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: showArrow,\n    1: setShowArrow\n  } = useState(false);\n  const {\n    0: showConsentMessage,\n    1: setShowConsentMessage\n  } = useState(true);\n  const {\n    0: showPopup,\n    1: setShowPopup\n  } = useState(false);\n  const router = useRouter();\n  const mouse = useRef([1200, 1]);\n  const onMouseMove = useCallback(({\n    clientX: x,\n    clientY: y\n  }) => mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2], [mouse.current]);\n  const onTouchMove = useCallback(e => {\n    const touch = e.changedTouches[0];\n    var x = touch.clientX;\n    var y = touch.clientY;\n    mouse.current = [x - window.innerWidth / 2, y - window.innerHeight / 2];\n  }, [mouse.current]);\n  useEffect(() => {// const options = {\n    //   autoConfig: true, \n    //   debug: false,\n    // };\n    // ReactPixel.init(\"506854653278097\", null, options);\n  }, []);\n  useEffect(() => {\n    // if (!window.GA_INITIALIZED) {\n    //   initGA();\n    //   window.GA_INITIALIZED = true;\n    // }\n    // logPageView();\n    // ReactPixel.pageView(); // For tracking page view\n    mouse.current[0] = window.innerWidth > 600 ? 1200 : 300;\n\n    if (router.route === \"/\" || router.route === \"/en\") {\n      setShowSketch(true);\n      setShowArrow(true);\n      setIsAbout(false);\n      setShowPopup(false);\n    } else if (router.route === \"/nosotros\" || router.route === \"/en/about\") {\n      setIsAbout(true);\n      setShowSketch(false);\n      setShowArrow(false);\n      setShowPopup(false);\n    } else if (router.route === \"/podcast\") {\n      setIsAbout(false);\n      setShowSketch(false);\n      setShowArrow(false);\n      setShowPopup(true);\n    } else {\n      setShowSketch(false);\n      setShowArrow(false);\n      setIsAbout(false);\n      setShowPopup(false);\n    }\n  }, [router.route]);\n  useEffect(() => {\n    if (showArrow || showConsentMessage) {\n      document.body.onscroll = function () {\n        checkScroll();\n      };\n    }\n  }, [showArrow]); // useEffect(() => {\n  //   let targetElement = document.querySelector(\"#Nav\");\n  //   if (isOpen) {\n  //     disableBodyScroll(targetElement);\n  //   } else {\n  //     enableBodyScroll(targetElement);\n  //   }\n  // }, [isOpen]);\n\n  const checkScroll = () => {\n    if (document.body.scrollTop > 100 || window.scrollY > 100) {\n      document.body.onscroll = null; // document.querySelector(\"#Clipper\").onscroll = null;\n\n      setShowArrow(false);\n      checkForConsent();\n      setShowConsentMessage(false);\n    }\n  };\n\n  const toggleNav = () => {\n    setOpen(!isOpen);\n  };\n\n  const closeNav = () => {\n    setOpen(false);\n  };\n\n  const doConsentToCookies = () => {\n    consentToCookies();\n  };\n\n  return __jsx(React.Fragment, null, __jsx(PageWrapper, {\n    id: \"Wrapper\",\n    onMouseMove: showSketch | isAbout ? onMouseMove : undefined,\n    onTouchMove: showSketch | isAbout ? onTouchMove : undefined\n  }, __jsx(Header, {\n    isOpen: isOpen,\n    headerTitle: headerTitle,\n    hasLoaded: hasLoaded,\n    closeNav: closeNav,\n    locale: locale,\n    route: router.route\n  }), React.cloneElement(children, {\n    setTitle: setTitle,\n    hasLoaded: hasLoaded,\n    mouse: mouse\n  }), __jsx(CookieMessage, {\n    locale: locale,\n    doConsentToCookies: doConsentToCookies,\n    hasToConsent: hasToConsent\n  }), __jsx(BodyOverflow, {\n    isOpen: isOpen,\n    hasLoaded: hasLoaded\n  }), showPopup && __jsx(NewsletterPopup, null)));\n});\nconst BodyOverflow = createGlobalStyle`\n  .TopBar{\n    box-shadow: 1px 1px 4px ${props => props.theme.colors.accent};\n  }\n  @media (max-width: 600px), (max-height:450px) {\n    .react-reveal {\n    animation: none !important;\n    opacity: 1 !important;\n    }\n    #Wrapper{\n      overflow: ${props => props.hasLoaded ? \"unset\" : \"hidden\"};\n      height:${props => props.hasLoaded ? \"unset\" : \"100%\"};\n    }\n    body {\n    overflow-y: ${props => props.hasLoaded ? \"auto\" : \"hidden\"};\n      &:after,&:before{\n        content: \" \";\n        position: fixed;\n        right: 0;\n        left: 0;\n        height: 18px;\n        z-index:100;\n        background-color: ${props => props.theme.colors.background};\n      }\n      &:before {\n        top:0;\n      }\n      &:after {\n        bottom:0;\n      }\n    }  \n  }\n`;\nconst BackgroundOpacity = styled.div`\n  background-color: ${props => props.theme.colors.background};\n  opacity: ${props => props.visible ? 0.6 : 0};\n  position: fixed;\n  pointer-events: ${props => props.visible ? \"auto\" : \"none\"};\n  left: 0;\n  bottom: 0;\n  right: 0;\n  top: 0;\n  z-index: 13;\n  transition: opacity 0.4s ease;\n`;\nconst PageWrapper = styled.div`\n  top: -3px;\n  position: relative;\n  width: 100%;\n  flex-direction: column;\n  display: flex;\n  justify-content: flex-start;\n  color: ${props => props.theme.colors.foreground};\n  background-color: ${props => props.theme.colors.background};\n`;\nconst Border = styled.div`\n  opacity: 1;\n  pointer-events: none;\n  z-index: 99;\n  width: calc(100% - 36px);\n  height: calc(100% - 36px);\n  background-color: none;\n  position: fixed;\n  left: 18px;\n  top: 18px;\n  right: 18px;\n  bottom: 18px;\n  margin: 0 auto;\n  max-width: 1504px;\n  mix-blend-mode: exclusion;\n  transition: opacity 0.3s ease-in, border 0.3s ease-in;\n  border: ${props => `${props.theme.stroke} solid ${props.theme.colors.foreground}`};\n  @media (max-width: 600px), (max-height: 450px) {\n    mix-blend-mode: normal;\n  }\n`;","map":null,"metadata":{},"sourceType":"module"}