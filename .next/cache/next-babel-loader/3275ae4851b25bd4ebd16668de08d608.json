{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport MailchimpSubscribe from \"react-mailchimp-subscribe\";\nconst url = \"https://studio.us19.list-manage.com/subscribe/post?u=c9d7bbb792de4cdbe363fad75&amp;id=434dbf9f3b\";\nconst isEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst CustomForm = ({\n  status,\n  message,\n  onValidated,\n  enterprise,\n  complete,\n  short\n}) => {\n  const {\n    0: displayMessage,\n    1: setMessage\n  } = useState(false);\n  const {\n    0: showMessage,\n    1: setShowMessage\n  } = useState(false);\n  let email, name, industry, company, employees;\n\n  const submitEnterprise = () => {\n    if (!name.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu nombre\");\n    } else if (!lastname.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu apellido\");\n    } else if (!email.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu email\");\n    } else if (!isEmail.test(email.value)) {\n      setShowMessage(true), setMessage(\"Email en formato incorrecto\");\n    } else {\n      setShowMessage(false), onValidated({\n        NAME: name.value,\n        EMAIL: email.value,\n        COMPANY: company.value,\n        EMPLOYEES: employees.value\n      });\n    }\n  };\n\n  const submitComplete = () => {\n    if (!name.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu nombre\");\n    } else if (!email.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu email\");\n    } else if (!isEmail.test(email.value)) {\n      setShowMessage(true), setMessage(\"Email en formato incorrecto\");\n    } else {\n      setShowMessage(false), onValidated({\n        NAME: name.value,\n        EMAIL: email.value,\n        INDUSTRY: industry.value\n      });\n    }\n  };\n\n  const submitShort = () => {\n    if (!email.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu email\");\n    } else if (!isEmail.test(email.value)) {\n      setShowMessage(true), setMessage(\"Email en formato incorrecto\");\n    } else {\n      setShowMessage(false), onValidated({\n        EMAIL: email.value\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, null, status === \"sending\" && __jsx(Message, null, \"Enviando...\"), showMessage ? __jsx(Message, {\n    error: true,\n    dangerouslySetInnerHTML: {\n      __html: displayMessage\n    }\n  }) : null, status === \"error\" && __jsx(Message, {\n    error: true,\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), status === \"success\" && __jsx(Message, {\n    success: true,\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), status !== \"success\" && __jsx(React.Fragment, null, __jsx(Label, null, __jsx(\"span\", null, \"email\"), __jsx(Input, {\n    ref: node => email = node,\n    type: \"email\",\n    placeholder: short ? \"Tu correo\" : \"Email\",\n    short: short\n  })), !short && __jsx(Label, null, __jsx(\"span\", null, \"nombre\"), __jsx(Input, {\n    ref: node => name = node,\n    type: \"text\",\n    placeholder: \"Nombre\"\n  })), complete && __jsx(Label, null, __jsx(\"span\", null, \"industria\"), __jsx(Input, {\n    ref: node => industry = node,\n    type: \"text\",\n    placeholder: \"Industria\"\n  })), enterprise && __jsx(React.Fragment, null, __jsx(Input, {\n    ref: node => company = node,\n    type: \"text\",\n    placeholder: \"compa\\xF1\\xEDa\",\n    id: \"compa\\xF1\\xEDa\"\n  }), __jsx(Label, {\n    htmlFor: \"compa\\xF1\\xEDa\"\n  }, \"compa\\xF1\\xEDa\"), __jsx(Input, {\n    ref: node => employees = node,\n    type: \"text\",\n    placeholder: \"empleados\",\n    id: \"empleados\"\n  }), __jsx(Label, {\n    htmlFor: \"empleados\"\n  }, \"empleados\")), __jsx(Button, {\n    short: short,\n    onClick: short ? submitShort : complete ? submitComplete : submitEnterprise\n  }, short ? \"Descargar PDF gratuito\" : \"Descargar gratis\")));\n};\n\nconst EmailCollector = ({\n  enterprise,\n  complete,\n  short\n}) => {\n  return __jsx(MailchimpSubscribe, {\n    url: url,\n    render: ({\n      subscribe,\n      status,\n      message\n    }) => __jsx(CustomForm, {\n      enterprise: enterprise,\n      complete: complete,\n      short: short,\n      status: status,\n      message: message,\n      onValidated: formData => subscribe(formData)\n    })\n  });\n};\n\nexport default EmailCollector;\nconst Background = styled.div.withConfig({\n  displayName: \"EmailCollector__Background\",\n  componentId: \"jldx4s-0\"\n})([\"background-color:\", \";opacity:\", \";position:fixed;pointer-events:\", \";left:0;bottom:0;right:0;top:0;z-index:13;transition:opacity 0.4s ease;\"], props => props.theme.colors.background, props => props.visible ? 0.6 : 0, props => props.visible ? \"auto\" : \"none\");\nconst Message = styled.div.withConfig({\n  displayName: \"EmailCollector__Message\",\n  componentId: \"jldx4s-1\"\n})([\"color:\", \";font-size:\", \";padding-bottom:5px;@media (max-width:600px),(max-height:450px){font-size:1.5rem;}\"], props => props.error ? props.theme.colors.error : props.success ? props.theme.colors.success : props.theme.colors.accent, props => props.success ? \"1.8rem\" : \"1.5rem\");\nconst Label = styled.label.withConfig({\n  displayName: \"EmailCollector__Label\",\n  componentId: \"jldx4s-2\"\n})([\"margin:0;span{font-size:0;height:0;width:0;position:absolute;}\"]);\nconst Input = styled.input.withConfig({\n  displayName: \"EmailCollector__Input\",\n  componentId: \"jldx4s-3\"\n})([\"width:100%;padding:13px 18px 13px 26px;line-height:100%;background-color:\", \";border-radius:\", \";border:none;font-size:1.7rem;margin:4px 0;height:48px;color:\", \";-webkit-appearance:textfield;appearance:textfield;::placeholder{padding-top:4px;color:#31302e;opacity:0.5;}\"], props => props.theme.colors.foreground, props => props.short ? \"4px 0px 0px 4px\" : \"4px\", props => props.theme.colors.foreground_lowest);\nconst Button = styled.button.withConfig({\n  displayName: \"EmailCollector__Button\",\n  componentId: \"jldx4s-4\"\n})([\"padding:14px 0%;margin:4px 0;text-align:center;width:\", \";background-color:\", \";color:\", \";border:0;font-size:1.8rem;border-radius:\", \";cursor:pointer;transition:0.3s ease all;@media (hover:hover) and (pointer:fine){&:hover{background-color:#27ae60;color:\", \";span{background-size:0 0;}}}\"], props => props.short ? \"50%\" : \"100%\", props => props.theme.colors.cta, props => props.theme.colors.background, props => props.short ? \"0px 4px 4px 0px\" : \"4px\", props => props.theme.colors.background);\nconst CrossContainer = styled.div.withConfig({\n  displayName: \"EmailCollector__CrossContainer\",\n  componentId: \"jldx4s-5\"\n})([\"width:50px;height:50px;padding:12px;position:absolute;top:3%;right:3%;svg{width:100%;cursor:pointer;}\"]);\nconst Wrapper = styled.div.withConfig({\n  displayName: \"EmailCollector__Wrapper\",\n  componentId: \"jldx4s-6\"\n})([\"pointer-events:\", \";opacity:\", \";max-width:440px;width:80%;top:50%;left:50%;transform:translateX(-50%) translateY(-50%) \", \";font-weight:100;position:fixed;transition:opacity 0.4s ease,transform 0.5s ease;z-index:14;@media (max-width:600px){max-width:calc(100% - 36px);width:100%;margin-left:18px;margin-right:18px;z-index:100;left:0;transform:translateX(0px) translateY(-50%);h4{font-size:2.5rem;}}\"], props => props.clickable ? \"auto\" : \"none\", props => props.clickable ? \"1\" : \"0\", props => props.clickable ? \"translateY(0%)\" : \"translateY(5%)\");","map":null,"metadata":{},"sourceType":"module"}