{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport Router from \"next/router\";\nimport { ThemeProvider } from \"styled-components\";\nimport LoadingBar from \"react-top-loading-bar\";\nimport Layout from \"components/layout\";\nimport theme from \"styles/theme\";\nimport Cookies from \"js-cookie/dist/js.cookie\"; // import en from \"public/locales/en/common.json\";\n\nimport es from \"public/locales/es/common.json\";\nimport { LangProvider } from \"utils/LangContext\";\nimport { withRouter } from \"next/router\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\n\nvar MyApp = /*#__PURE__*/function (_App) {\n  _inherits(MyApp, _App);\n\n  var _super = _createSuper(MyApp);\n\n  function MyApp(props) {\n    var _this;\n\n    _classCallCheck(this, MyApp);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleLang\", function (lang) {\n      var language = lang === \"en\" ? en : es;\n      Cookies.set(\"chosenLang\", lang);\n\n      _this.setState({\n        locale: language\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRouteComplete\", function (url) {\n      var _myself = _assertThisInitialized(_this);\n\n      setTimeout(function () {\n        _myself.LoadingBar.complete();\n      }, 300);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRouteStart\", function (url) {\n      _this.LoadingBar.continuousStart();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRouteError\", function (err, url) {\n      var _myself = _assertThisInitialized(_this);\n\n      setTimeout(function () {\n        if (err.cancelled) {\n          console.log(\"\".concat(err, \" on route to \").concat(url));\n        }\n\n        _myself.LoadingBar.complete();\n      }, 300);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkForConsent\", function () {\n      // Check if cookie message has been closed before\n      var _C = Cookies.get(\"showCookieMessage\");\n\n      if (_C === undefined) {\n        _this.setState({\n          hasToConsent: true\n        });\n      } else if (_C === \"false\") {\n        _this.setState({\n          hasToConsent: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"consentToCookies\", function () {\n      Cookies.set(\"showCookieMessage\", \"false\");\n\n      _this.setState({\n        hasToConsent: false\n      });\n    });\n\n    _this.state = {\n      // locale: props.router.route.includes(\"/en\") ? en : es,\n      locale: es,\n      hasToConsent: false,\n      //return hasLoaded to false\n      hasLoaded: true,\n      readyToScroll: false\n    };\n    return _this;\n  }\n\n  _createClass(MyApp, [{\n    key: \"authenticate\",\n    value: function authenticate() {\n      return new Promise(function (resolve) {\n        return setTimeout(resolve, 1500);\n      }); //1500\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Disable scroll\n      // Esto es importante para el loading icon\n      var targetElement = document.querySelector(\"#bordered\"); //dummy\n\n      disableBodyScroll(targetElement); // Load Animation\n\n      this.authenticate().then(function () {\n        var bordered = document.getElementById(\"bordered\");\n        var logo = document.getElementById(\"logo\");\n        var revealer = document.getElementById(\"revealer\");\n\n        if (bordered) {\n          console.log(\"bordered\");\n          setTimeout(function () {\n            // transition out\n            bordered.classList.add(\"hidden\");\n            logo.style.opacity = \"0\"; // bordered.style.transform = \"scale(1)\";\n            // bordered.style.borderWidth = \"2px\";\n\n            setTimeout(function () {\n              revealer.style.opacity = \"0\";\n              revealer.style.pointerEvents = \"none\";\n\n              _this2.setState({\n                hasLoaded: true\n              }, function () {\n                return console.log(\"Page hasLoaded\");\n              }, enableBodyScroll(targetElement));\n            }, 500);\n            setTimeout(function () {\n              // remove from DOM\n              bordered.remove();\n              revealer.remove();\n              logo.remove();\n            }, 3000);\n          }, 500);\n        }\n      }); // router event listeners for loadingBar\n\n      Router.events.on(\"routeChangeStart\", this.handleRouteStart);\n      Router.events.on(\"routeChangeComplete\", this.handleRouteComplete);\n      Router.events.on(\"routeChangeError\", this.handleRouteError);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Router.events.off(\"routeChangeStart\", this.handleRouteStart);\n      Router.events.off(\"routeChangeComplete\", this.handleRouteComplete);\n      Router.events.off(\"routeChangeError\", this.handleRouteError);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      return __jsx(ThemeProvider, {\n        theme: theme\n      }, __jsx(LangProvider, {\n        value: this.state.locale\n      }, __jsx(LoadingBar, {\n        onRef: function onRef(ref) {\n          return _this3.LoadingBar = ref;\n        },\n        height: 3,\n        color: theme.colors.accent,\n        className: \"TopBar\"\n      }), __jsx(Layout, {\n        locale: this.state.locale,\n        checkForConsent: this.checkForConsent,\n        consentToCookies: this.consentToCookies,\n        hasToConsent: this.state.hasToConsent,\n        hasLoaded: this.state.hasLoaded,\n        toggleLang: this.toggleLang\n      }, __jsx(Component, _extends({\n        locale: this.state.locale\n      }, pageProps, {\n        lang: this.state.locale.lang\n      })))));\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default withRouter(MyApp);","map":null,"metadata":{},"sourceType":"module"}