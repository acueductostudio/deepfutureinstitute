{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport Cross from \"public/assets/img/layout/cross.svg\";\nimport MailchimpSubscribe from \"react-mailchimp-subscribe\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nconst url = \"https://studio.us19.list-manage.com/subscribe/post?u=c9d7bbb792de4cdbe363fad75&amp;id=434dbf9f3b\";\nconst isEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst CustomForm = ({\n  status,\n  message,\n  onValidated\n}) => {\n  const {\n    0: displayMessage,\n    1: setMessage\n  } = useState(false);\n  const {\n    0: showMessage,\n    1: setShowMessage\n  } = useState(false);\n  let email, name, lastname;\n\n  const submit = () => {\n    if (!name.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu nombre\");\n    } else if (!lastname.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu apellido\");\n    } else if (!email.value) {\n      setShowMessage(true), setMessage(\"Ingresa tu email\");\n    } else if (!isEmail.test(email.value)) {\n      setShowMessage(true), setMessage(\"Email en formato incorrecto\");\n    } else {\n      setShowMessage(false), onValidated({\n        EMAIL: email.value,\n        FNAME: name.value,\n        FLASTNAME: lastname.value\n      });\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"h4\", null, \"suscr\\xEDbete y\", __jsx(\"br\", null), \"te actualizamos\"), __jsx(\"p\", null, \"Recibe un correo cada vez que publiquemos un cap\\xEDtulo nuevo.\"), status === \"sending\" && __jsx(Message, null, \"Enviando...\"), status === \"error\" && __jsx(Message, {\n    error: true,\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), showMessage ? __jsx(Message, {\n    error: true,\n    dangerouslySetInnerHTML: {\n      __html: displayMessage\n    }\n  }) : null, status === \"success\" && __jsx(Message, {\n    success: true,\n    dangerouslySetInnerHTML: {\n      __html: message\n    }\n  }), status !== \"success\" && __jsx(React.Fragment, null, __jsx(\"input\", {\n    ref: node => name = node,\n    type: \"text\",\n    placeholder: \"nombre\",\n    id: \"name\"\n  }), __jsx(\"label\", {\n    htmlFor: \"name\"\n  }, \"nombre\"), __jsx(\"input\", {\n    ref: node => lastname = node,\n    type: \"text\",\n    placeholder: \"apellido\",\n    id: \"lastname\"\n  }), __jsx(\"label\", {\n    htmlFor: \"lastname\"\n  }, \"last name\"), __jsx(\"input\", {\n    ref: node => email = node,\n    type: \"email\",\n    placeholder: \"email\",\n    id: \"email\"\n  }), __jsx(\"label\", {\n    htmlFor: \"email\"\n  }, \"email\"), __jsx(Button, {\n    onClick: submit\n  }, \"suscribirme\")));\n};\n\nconst NewsletterPopup = () => {\n  const {\n    0: showPopup,\n    1: setShowPopup\n  } = useState(false);\n  useEffect(() => {\n    let timer1 = setTimeout(() => popupShow(), 10000);\n    return () => {\n      clearTimeout(timer1);\n    };\n  }, []);\n\n  const popupShow = () => {\n    // Disable scroll\n    const targetElement = document.querySelector(\"#NewsletterPopup\"); //dummy\n\n    disableBodyScroll(targetElement);\n    setShowPopup(true);\n  };\n\n  const unlockScreen = () => {\n    const targetElement = document.querySelector(\"#NewsletterPopup\"); //dummy\n\n    enableBodyScroll(targetElement);\n    setShowPopup(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Wrapper, {\n    clickable: showPopup,\n    id: \"NewsletterPopup\"\n  }, __jsx(Border, null, __jsx(MailchimpSubscribe, {\n    url: url,\n    render: ({\n      subscribe,\n      status,\n      message\n    }) => __jsx(CustomForm, {\n      status: status,\n      message: message,\n      onValidated: formData => subscribe(formData)\n    })\n  }), __jsx(CrossContainer, null, __jsx(Cross, {\n    onClick: unlockScreen\n  })))), __jsx(Background, {\n    visible: showPopup,\n    onClick: unlockScreen\n  }));\n};\n\nexport default NewsletterPopup;\nconst Background = styled.div`\n  background-color: ${props => props.theme.colors.background};\n  opacity: ${props => props.visible ? 0.6 : 0};\n  position: fixed;\n  pointer-events: ${props => props.visible ? \"auto\" : \"none\"};\n  left: 0;\n  bottom: 0;\n  right: 0;\n  top: 0;\n  z-index: 13;\n  transition: opacity 0.4s ease;\n`;\nconst Message = styled.div`\n  color: ${props => props.error ? props.theme.colors.error : props.success ? props.theme.colors.success : props.theme.colors.accent};\n  font-size: ${props => props.success ? \"1.8rem\" : \"1.5rem\"};\n  padding-bottom: 5px;\n  @media (max-width: 600px), (max-height: 450px) {\n    font-size: 1.5rem;\n  }\n`;\nconst Border = styled.div`\n  border: ${props => props.theme.stroke} solid\n    ${props => props.theme.colors.foreground};\n  background-color: ${props => props.theme.colors.background};\n  padding: 10% 15% 14% 15%;\n  @media (max-width: 380px) {\n    padding: 10% 10% 14% 10%;\n  }\n`;\nconst Button = styled.button`\n  padding: 14px 0%;\n  margin-top: 5px;\n  text-align: center;\n  width: 100%;\n  background-color: ${props => props.theme.colors.accent};\n  color: ${props => props.theme.colors.foreground};\n  border: 0;\n  font-weight: 100;\n  font-size: 1.8rem;\n  cursor: pointer;\n  transition: 0.3s ease all;\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      background-color: #27ae60;\n      color: ${props => props.theme.colors.background};\n      span {\n        background-size: 0 0;\n      }\n    }\n  }\n`;\nconst CrossContainer = styled.div`\n  width: 50px;\n  height: 50px;\n  padding: 12px;\n  position: absolute;\n  top: 3%;\n  right: 3%;\n  svg {\n    width: 100%;\n    cursor: pointer;\n  }\n`;\nconst Wrapper = styled.div`\n  pointer-events: ${props => props.clickable ? \"auto\" : \"none\"};\n  opacity: ${props => props.clickable ? \"1\" : \"0\"};\n  max-width: 440px;\n  width: 80%;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%)\n    ${props => props.clickable ? \"translateY(0%)\" : \"translateY(5%)\"};\n  font-weight: 100;\n  position: fixed;\n  transition: opacity 0.4s ease, transform 0.5s ease;\n  z-index: 14;\n  p {\n    color: ${props => props.theme.colors.foreground_low};\n    padding-bottom: 20px;\n  }\n  h4 {\n    color: ${props => props.theme.colors.accent};\n    font-size: 3rem;\n    font-weight: 300;\n    line-height: 110%;\n    margin-bottom: 5%;\n  }\n  label{\n    font-size:0;\n    height:0;\n    width:0;\n    position:absolute;\n  }\n  input {\n    font-weight: 100;\n    border-radius: 0;\n    width: 100%;\n    padding: 10px 18px 13px 18px;\n    line-height: 100%;\n    background-color: transparent;\n    border: ${props => props.theme.stroke} solid\n      ${props => props.theme.colors.foreground_lowest};\n    margin: 4px 0;\n    color: ${props => props.theme.colors.foreground};\n    -webkit-appearance: textfield;\n    appearance: textfield;\n    ::placeholder {\n      padding-top: 4px;\n    }\n  }\n  @media (max-width: 600px) {\n    max-width: calc(100% - 36px);\n    width: 100%;\n    margin-left: 18px;\n    margin-right: 18px;\n    z-index: 100;\n    left: 0;\n    transform: translateX(0px) translateY(-50%);\n    h4 {\n      font-size: 2.5rem;\n    }\n  }\n  @media (max-width: 380px) {\n    /* input {\n      padding-top: 14px;\n    } */\n  }\n`;","map":null,"metadata":{},"sourceType":"module"}